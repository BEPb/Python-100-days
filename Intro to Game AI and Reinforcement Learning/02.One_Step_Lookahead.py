# 1) Более сложная эвристика
# Эвристика из учебника рассматривает все группы из четырех смежных местоположений сетки в одной строке, столбце или
# диагонали и назначает точки для каждого вхождения следующих шаблонов:
# На изображении выше мы предполагаем, что агент является красным игроком, а противник играет желтыми дисками.
# В функции get_heuristic () num_fours, num_threes и num_threes_opp - это количество окон в игровой сетке, которым присвоено 1000000, 1 и -100 баллов соответственно.
def get_heuristic(grid, mark, config):
    num_threes = count_windows(grid, 3, mark, config)
    num_fours = count_windows(grid, 4, mark, config)
    num_threes_opp = count_windows(grid, 3, mark%2+1, config)
    score = num_threes - 1e2*num_threes_opp + 1e6*num_fours
    return score

# В этом руководстве вы измените эвристику на следующую (где вы определяете количество баллов для каждого из A, B,
# C, D и E). Вы определите эти значения в ячейке кода ниже.
# Чтобы проверить ваш ответ, мы используем ваши значения для создания эвристической функции следующим образом:
def get_heuristic_q1(grid, col, mark, config):
    num_twos = count_windows(grid, 2, mark, config)
    num_threes = count_windows(grid, 3, mark, config)
    num_fours = count_windows(grid, 4, mark, config)
    num_twos_opp = count_windows(grid, 2, mark%2+1, config)
    num_threes_opp = count_windows(grid, 3, mark%2+1, config)
    score = A*num_fours + B*num_threes + C*num_twos + D*num_twos_opp + E*num_threes_opp
    return score

# Затем эта эвристика используется для создания агента, который соревнуется с агентом из учебника в 50 различных игровых раундах. Чтобы быть отмеченным правильно,
#
# ваш агент должен выиграть как минимум половину игр, и C и D оба должны быть ненулевыми.
# TODO: укажите здесь свои ценности
A = 1e10
B = 1e4
C = 1e2
D = -1
E = -1e6

# 2) Побеждает ли агент?
# Рассмотрим игровую доску ниже.
#
# Изображение
# Допустим, агент использует красные диски, и теперь очередь агента.
#
# Если агент использует эвристику из учебника, выиграет он или проиграет?
# Если агент использует эвристику, которую вы только что реализовали, выиграет он или проиграет?

# Решение: у агента есть два варианта: он может играть либо в столбце 0 (крайний левый столбец), либо в столбце 6 (
# крайний правый столбец). Если агент играет в столбце 0, он определенно выигрывает игру на своем следующем ходу. И,
# если он играет в столбце 6, он, вероятно, проигрывает игру (поскольку, если противник отвечает, играя в том же
# столбце, то противник выигрывает игру).
#
# Если агент использует эвристику из учебника, оба столбца оцениваются одинаково, поэтому агент будет выбирать из
# них (равномерно) случайным образом. В этом случае у агента есть примерно 50/50 шансов на победу в игре.
#
# Что касается эвристики, которую вы только что реализовали, это будет зависеть от вашей реализации, поэтому мы
# предоставим ответ на эвристику решения, которую мы предоставили - в этом случае агент, скорее всего,
#  проиграет игру, поскольку он обязательно выберет последний столбец.
#
# Это интересная ситуация, потому что в среднем мы видим, что агент с новой эвристикой работает лучше, чем агент из
# учебника (и тем не менее, для этой доски он гарантированно примет неправильное решение).
#
#
# 3) Подать заявку на участие в конкурсе
# А теперь пора выставить агента на конкурс! Используйте следующую ячейку кода, чтобы определить агента. (Вы можете
# увидеть пример того, как написать действующего агента в этой записной книжке.)
#
# Вам предлагается использовать то, что вы узнали в первом вопросе этого упражнения, для написания агента.
#  Используйте код из учебника в качестве отправной точки.

def my_agent(obs, config):
    # Your code here: Amend the agent!
    import random
    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]
    return random.choice(valid_moves)



































