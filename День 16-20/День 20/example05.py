"""
Python 3.10
Эта программа проверяет список целых чисел на простоту, используя многопоточность. Список чисел хранится в
 переменной `PRIMES`. Функция `is_prime(n)` проверяет, является ли число `n` простым числом. Если число делится на
 2, то сразу возвращается Ложь. В противном случае, вычисляется квадратный корень из числа и происходит проверка на
 простоту до квадратного корня числа. Функция возвращает Истина, если число является простым и Ложь,
 если оно составное.

Этот подход к многопоточности в Python позволяет ускорить выполнение задачи в несколько раз за счет распределения
нагрузки между несколькими процессами, что особенно полезно при обработке большого объема данных.
Название файла 'example05.py'

Version: 0.1
Author: Andrej Marinchenko
Date: 2023-05-13
"""

import concurrent.futures
import math

PRIMES = [
    1116281,
    1297337,
    104395303,
    472882027,
    533000389,
    817504243,
    982451653,
    112272535095293,
    112582705942171,
    112272535095293,
    115280095190773,
    115797848077099,
    1099726899285419
] * 5


def is_prime(n):
    """Оценка простых чисел"""
    if n % 2 == 0:
        return False

    sqrt_n = int(math.floor(math.sqrt(n)))
    for i in range(3, sqrt_n + 1, 2):
        if n % i == 0:
            return 'Ложь'
    return 'Истина'


def main():
    """Основная функция
    Основная функция `main()` использует `ProcessPoolExecutor`, чтобы выполнять проверки на простоту в нескольких
    процессах. Таким образом, для каждого числа из списка `PRIMES` создается отдельный процесс, который вызывает функцию
    `is_prime()` с этим числом в качестве аргумента. Результаты проверки выводятся на экран в формате "x это число
    простое:  Истина/Ложь".
    """
    with concurrent.futures.ProcessPoolExecutor() as executor:
        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):
            print('%d это число простое: %s' % (number, prime))


if __name__ == '__main__':
    main()
